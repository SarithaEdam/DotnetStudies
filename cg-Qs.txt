General .NET Knowledge:

String is immutable; each modification creates a new object. uses more memory allocations.
StringBuilder is mutable, efficient for dynamic string manipulations.(s.append())

ViewState in ASP.NET:
Persists state between postbacks in ASP.NET Web Forms.

IEnumerable vs. IQueryable:
IEnumerable for LINQ to Objects; IQueryable for LINQ to SQL.

ASP.NET MVC vs. Web Forms:
MVC separates concerns; Web Forms is event-driven.

Dependency Injection (DI):
Promotes loose coupling and testability by injecting dependencies.

Global.asax:
ASP.NET application file containing application-wide events and settings.

Entity Framework:
ORM framework simplifying database operations with .NET objects.

String Comparison in C#:
== compares reference equality; Equals compares content equality.

Using Statement in C#:
Manages resources, ensures disposal within a defined scope.

SOLID Principles:
Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.

async and await:
Facilitate asynchronous programming, ensuring non-blocking execution.

WCF vs. Web API:
WCF for distributed systems; Web API for HTTP services.

Garbage Collection in .NET:
Automatic memory management by reclaiming unused objects.

App.config or Web.config:
Configuration files holding application settings.

ref vs. out:
Both pass parameters by reference; out requires assignment within the method.

Error Handling in .NET:
Use try, catch, finally blocks for structured error handling.

Delegate in C#:
Represents references to methods with specific parameters and return types.

Extension Methods: Add new methods to existing types without modifying them.

Value Type vs. Reference Type:
Value types store data directly; reference types store references.

Caching in ASP.NET:
Mechanisms like Output Caching, Fragment Caching, and Data Caching for performance.
OOP, Exception Handling, Method Overriding, Method Overloading, Constructors, Access Modifiers, and Design Patterns:

OOP Principles: Encapsulation, Inheritance, Polymorphism for code structuring.

Encapsulation in C#: Bundles data and associated methods, ensuring data integrity.

Abstract Classes vs. Interfaces: Abstract classes can have method implementations; interfaces define signatures.

Polymorphism: Objects treated as instances of their base class, enhancing flexibility.

Inheritance in C#: Allows a class to inherit properties and methods from another class.

Exception Handling: Use try, catch, finally blocks for handling and managing exceptions.

Throw Statement: Explicitly throws an exception.

Checked vs. Unchecked Exceptions: Checked exceptions checked at compile-time; unchecked exceptions are not.

Method Overloading: Defines multiple methods with the same name but different parameters.

Virtual and Override Keywords: virtual allows method overriding; override provides specific implementation.

Method Hiding: Occurs when a base class method is redefined in a derived class using new.

Constructors in C#: Special methods for initializing objects; default and parameterized constructors.

Default vs. Parameterized Constructor: Default constructor has no parameters; parameterized constructor accepts parameters.

Access Modifiers in C#: Control visibility and accessibility of classes, methods, and properties.

Properties in C#: Provide access and modification to private fields with additional logic.

Singleton Pattern: Ensures a class has only one instance and provides a global point to it.

Factory Method Pattern: Defines an interface for creating objects, allowing subclasses to alter types.

Observer Pattern: Establishes one-to-many dependency between objects for state changes.

Dependency Injection (DI) Pattern: Design pattern where a class receives dependencies from external sources.

Repository Pattern: Separates logic that retrieves data from the underlying storage.
